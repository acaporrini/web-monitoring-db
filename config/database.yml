# DB-related rake commands execute on both development *and* test environments
# when the current environment is development, but that means the env vars in
# .env.test get missed when running rake in development but operating on the
# test DB. Fix by loading test DATABASE_* vars into DATABASE_*_TEST ◔̯◔
<%
  if Rails.env.development? || Rails.env.test?
    # Copy current environment and overlay test-specific config onto it
    test_env = {}.update(ENV)
    Dotenv::ignoring_nonexistent_files do
      test_env.update(Dotenv::Environment.new('.env.test', true))
    end

    # Copy any `DATABASE_*` variables to current env as `DATABASE_*_TEST`
    test_env.each do |key, value|
      ENV["#{key}_TEST"] = value if key.start_with?('DATABASE')
    end
  end
%>
default: &default
  adapter: postgresql
  encoding: unicode
  # For details on connection pooling, see rails configuration guide
  # http://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  host: localhost

development:
  <<: *default
  database: web-monitoring-db_development

  # The specified database role being used to connect to postgres.
  # To create additional roles in postgres see `$ createuser --help`.
  # When left blank, postgres will use the default role. This is
  # the same name as the operating system user that initialized the database.
  #username: webpage-versions-db

  # The password associated with the postgres role (username).
  #password:

  # Connect on a TCP socket. Omitted by default since the client uses a
  # domain socket that doesn't need configuration. Windows does not have
  # domain sockets, so uncomment these lines.
  #host: localhost

  # The TCP port the server listens on. Defaults to 5432.
  # If your server runs on a different port number, change accordingly.
  #port: 5432

  # Schema search path. The server defaults to $user,public
  #schema_search_path: myapp,sharedapp,public

  # Minimum log levels, in increasing order:
  #   debug5, debug4, debug3, debug2, debug1,
  #   log, notice, warning, error, fatal, and panic
  # Defaults to warning.
  #min_messages: notice

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  database: web-monitoring-db_test
  url: <%= ENV['DATABASE_URL_TEST'] %>

# As with config/secrets.yml, you never want to store sensitive information,
# like your database password, in your source code. If your source code is
# ever seen by anyone, they now have access to your database.
#
# Instead, provide the password as a unix environment variable when you boot
# the app. Read http://guides.rubyonrails.org/configuring.html#configuring-a-database
# for a full rundown on how to provide these environment variables in a
# production deployment.
#
# On Heroku and other platform providers, you may have a full connection URL
# available as an environment variable. For example:
#
#   DATABASE_URL="postgres://myuser:mypass@localhost/somedatabase"
#
# You can use this database configuration with:
#
#   production:
#     url: <%= ENV['DATABASE_URL'] %>
#
production:
  <<: *default
  # Require explicit, complete DB configuration as a URL.
  # NOTE: DATABASE_RDS is temporary, and allows us to transition databases from
  # Heroku to AWS RDS before moving the whole application itself (because
  # Heroku auto-manages DATABASE_URL, changes we make to it won't stick)
  url: <%= ENV['DATABASE_RDS'] || ENV['DATABASE_URL'] %>
